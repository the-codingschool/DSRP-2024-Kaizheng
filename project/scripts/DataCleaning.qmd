Load libraries

```{r}
install_if_missing <- function(package) {
  if (!require(package, character.only = TRUE)) {
    install.packages(package, dependencies = TRUE)
    library(package, character.only = TRUE)
  }
}
install_if_missing("janitor")
install_if_missing("gt")
install_if_missing("dplyr")
install_if_missing("caret")
install_if_missing("mltools")
install_if_missing("data.table")
install_if_missing("caTools")
install_if_missing("readr")
library(janitor)
library(dplyr)
library(ggplot2)
library(gt)
library(dplyr)
library(caret)
library(mltools)
library(data.table)
library(caTools)
library(readr)
```

Reading the data

```{r}
traffic_data <- read.csv("data_traffic.csv")
nrow(traffic_data)
```

Remove NA values and subset data

```{r}
#remove NA values and subset data
cleaned_data <- traffic_data |>
  select("party_age", "at_fault") |>
  na.omit()
#plot data
cleaned_data |>
  filter(at_fault == "Yes") |>
  ggplot(aes(x = party_age)) + geom_histogram(fill = "grey", boundary = 0) +
  labs(title = "Distribution of Ages for At-Fault Parties",
       x = "Age of Party",
       y = "Count") +
  xlim(0,100) +
  ylim(0, 1600)
cleaned_data |>
  filter(at_fault == "No") |>
  ggplot(aes(x = party_age)) + geom_histogram(fill = "grey", boundary = 0) + labs(title = "Distribution of Ages for Non-Fault Parties",
       x = "Age of Party",
       y = "Count") + 
  xlim(0,100) +
  ylim(0,1600)
```

Find factors that could cause these higher crash rates from mid aged people.

```{r}

sobriety_data <- traffic_data |>
  filter(party_age  > 0) |>
  select("party_age", "party_sobriety") |>
  na.omit()
table(sobriety_data$party_sobriety)
sobriety_data |>
  filter(party_sobriety == "Had Been Drinking, Under Influence") |>
  ggplot(aes(x = party_age)) + geom_histogram(fill = "grey", boundary = 0) + labs(title = "Distribution of Ages for Under the Influence Drinking crashes",
       x = "Sobriety",
       y = "Count") + 
  xlim(0,100) + 
  ylim(0, 70)
sobriety_data |>
  filter(party_sobriety == "Had Not Been Drinking") |>
  ggplot(aes(x = party_age)) + geom_histogram(fill = "grey", boundary = 0) + labs(title = "Distribution of Ages for No Drinking crashes",
       x = "Sobriety",
       y = "Count")
```

Testing for relationships between party_sobriety and collision severity

```{r}
inattention_data <- traffic_data |>
  select("party_sobriety", "collision_severity") |>
  na.omit()
inattention_data |>
  ggplot(aes(x = collision_severity, fill = party_sobriety)) + geom_bar(position = "dodge") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
#Include only the rows that we deem important
inattention_data |>
  filter(party_sobriety %in% c("Had Been Drinking, Under Influence", "Had Been Drinking, Not Under Influence")) |>
  ggplot(aes(x = collision_severity, fill = party_sobriety)) + geom_bar(position = "dodge") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
```

Effect of airbag on collision severity

```{r}
safety_data <- traffic_data |>
  select("collision_severity", "party_safety_equip_1") |>
  na.omit()
graph_collision_severity <- function(severity)
  safety_data |>
  filter(collision_severity %in% severity) |>
  filter(party_safety_equip_1 %in% c("Air Bag Deployed", "Air Bag Not Deployed")) |>
  ggplot(aes(x = collision_severity, fill = party_safety_equip_1)) + geom_bar(position = "dodge") + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
graph_collision_severity(severity = "Fatal")
graph_collision_severity(severity = "Injury (Complaint of Pain)")
graph_collision_severity(severity = "Injury (Other Visible)")
graph_collision_severity(severity = "Injury (Severe)")
```

Weather, location, car, driver,

Effect of weather on collision severity

```{r}
weather_data <- traffic_data |>
  select("weather_1", "collision_severity") |>
  filter(collision_severity != "Medical") |>
  filter(weather_1 %in% c("Clear", "Cloudy", "Fog", "Raining")) |>
  na.omit()
weather_data |>
  filter(collision_severity != "Medical") |>
  ggplot(aes(x = collision_severity, fill = weather_1)) + geom_bar()
weather_data |>
  filter(collision_severity != "Medical") |>
  filter(weather_1 != "Clear") |>
  ggplot(aes(x = collision_severity, fill = weather_1)) + geom_bar(position = "dodge")
```

Effect of time on collision severity

```{r}
time_data <- traffic_data |>
  select("time_cat", "collision_severity") |>
  filter(collision_severity != "Medical") |>
  filter(time_cat != "") |>
  na.omit()
time_order <- c("6:01 am to 10:00 am", "10:01 am to 2:00 pm", "2:01 pm to 6:00 pm", "6:01 pm to 10:00 pm", "10:01 pm to 2:00 am", "2:01 am to 6:00 am")
time_data$time_cat <- factor(time_data$time_cat, levels = time_order)
time_data <- time_data[order(time_data$time_cat), ]
time_data |>
  filter(collision_severity %in% c("Fatal", "Injury (Complaint of Pain)")) |>
  ggplot(aes(x = collision_severity, fill = time_cat)) + geom_bar(position = "dodge") +
  labs(title = "Effect of time on collision severities", x = "Collision Severity") + guides(fill=guide_legend(title="Time")) + facet_wrap(~ collision_severity, scales = "free")
```

Statistical tests

```{r}
#mutate data to ensure that expected values are above 5
chisq_time_data <- time_data %>%
  mutate(new_time_cat = case_when(
    time_cat %in% c('10:01 pm to 2:00 am', '2:01 am to 6:00 am') ~ 'Night (10 pm to 6 am)',
    time_cat %in% c('6:01 am to 10:00 am', '10:01 am to 2:00 pm') ~ 'Morning (6 am to 2 pm)',
    TRUE ~ 'Afternoon/Evening (2 pm to 10pm'
  ))
head(chisq_time_data)
# Create a contingency table
contingency_table <- table(chisq_time_data$collision_severity, chisq_time_data$new_time_cat)

# Print the contingency table
head(contingency_table)

# Run the chi-squared test
chi_squared_test <- chisq.test(contingency_table)

# Print the test results
print(chi_squared_test)

# Check the expected counts to ensure they are large enough for the chi-squared test to be valid
print(chi_squared_test$expected)

```

replotting data with new categories

```{r}
chisq_time_data |>
  filter(collision_severity %in% c("Fatal", "Injury (Complaint of Pain)")) |>
  ggplot(aes(x = collision_severity, fill = new_time_cat)) + geom_bar(position = "dodge") +
  labs(title = "Effect of time on collision severities", x = "Collision Severity") + guides(fill=guide_legend(title="Time")) + facet_wrap(~ collision_severity, scales = "free")
```

Polynomial regression

```{r}
MLdata <- traffic_data |>
  select("time_cat", "party_age", "number_injured", "collision_severity") |>
  filter(collision_severity != "Medical") |>
  na.omit()
MLdata <-
  MLdata |>
  mutate(new_col_sever = case_when(
    collision_severity %in% c("Injury (Complaint of Pain)", "Injury (Other Visible)") ~ 1,
    collision_severity == "Injury (Severe)" ~ 2,
    collision_severity == "Fatal" ~ 3)
)
# Set seed for reproducibility
set.seed(42)
# Split the data into training (80%) and test (20%) sets using caTools
split <- sample.split(MLdata$new_col_sever, SplitRatio = 0.8)
train_data <- subset(MLdata, split == TRUE) |>
  na.omit()
test_data <- subset(MLdata, split == FALSE) |>
  na.omit()
```

Fit model on training data and predict

```{r}
lr_model <- lm(new_col_sever ~ time_cat + party_age + number_injured, data = train_data)
#predict
test_data$pred <- predict(lr_model, newdata = test_data)
```

Visualize results

```{r}
ggplot(test_data, aes(x = new_col_sever, y = pred)) +
  geom_point() +
  geom_abline(linetype = "dashed", color = "red") +
  labs(title = "Real vs Predicted Values",
       x = "True collision severity",
       y = "Predicted collision severity")

```

Testing accuracy

```{r}
mse <-  mean((test_data$new_col_sever - pred)^2)
r_squared <- summary(lr_model)$r.squared
mse
r_squared
```
